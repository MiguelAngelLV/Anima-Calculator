/*******************************************************************************
 * Copyright 2011 Miguel Ángel López Vicente 
 *  
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *  
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *  
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package cc.anima.ui;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Vector;
import cc.anima.app.Anima;
import cc.utilidades.Eval;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.ViewFlipper;

public class Principal extends Activity {
	
	private Vector<Modificador> modAtaque;
	private Vector<Modificador> modDefensa;
	private TextView ataque;
	private TextView defensa;
	private TextView resultado;
	private Anima anima;
	
	

	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        anima = new Anima(getResources());
        modAtaque = cargar(getResources().openRawResource(R.raw.ataque), new ModificadorAtaque());
        modDefensa =  cargar(getResources().openRawResource(R.raw.defensa), new ModificadorDefensa());
        
        ((EditText) findViewById(R.ataque.valor)).addTextChangedListener(new CalcularAtaque());
        ataque =  (TextView) findViewById(R.ataque.total);
  
        ((EditText) findViewById(R.defensa.valor)).addTextChangedListener(new CalcularDefensa());
        defensa =  (TextView) findViewById(R.defensa.total);
        
       
        insertar(R.ataque.columna1, R.ataque.columna2, modAtaque);
        insertar(R.defensa.columna1, R.defensa.columna2, modDefensa);
        resultado = (TextView) findViewById(R.id.resultado);
        
        ((EditText)(findViewById(R.ataque.danio))).addTextChangedListener(new Danio());
        ((EditText)(findViewById(R.defensa.ta))).addTextChangedListener(new TA());

        
    }

	
	public void insertar(int par, int impar, Vector<Modificador> vector) {
		ViewGroup vpar = (ViewGroup) findViewById(par);
		ViewGroup vimpar = (ViewGroup) findViewById(impar);
		for (int i = 0; i < vector.size(); i++)
			if (i%2 == 0)
				vpar.addView(vector.get(i));
			else
				vimpar.addView(vector.get(i));

	}
	
	public Vector<Modificador> cargar(InputStream s, OnCheckedChangeListener l) {
		Vector<Modificador> v = new Vector<Modificador>();
		try {
			BufferedReader buffer = new BufferedReader(new InputStreamReader(s));
			String line = buffer.readLine();	
			while (line != null) {
				v.add(new Modificador(this, line, l));
				line = buffer.readLine();
			}
		 
		} catch(Exception e) {}
		
		return v;
	}
	
	
	
	public class CalcularAtaque implements TextWatcher{

		public void afterTextChanged(Editable s) {
			anima.setAtaque(Eval.string(s.toString()));
			ataque.setText(""+anima.getAtaqueTotal());

		}

		public void beforeTextChanged(CharSequence se, int s, int c, int a) {}
		public void onTextChanged(CharSequence se, int s, int b, int c) {}

	}
	
	public class CalcularDefensa implements TextWatcher{

		public void afterTextChanged(Editable s) {
			anima.setDefensa(Eval.string(s.toString()));
			defensa.setText("" + anima.getDefensaTotal());

		}

		public void beforeTextChanged(CharSequence se, int s, int c, int a) {}
		public void onTextChanged(CharSequence se, int s, int b, int c) {}		
	}
	
	public class Danio implements TextWatcher{

		public void afterTextChanged(Editable s) {
			anima.setDanio(Eval.string(s.toString()));
		}

		public void beforeTextChanged(CharSequence se, int s, int c, int a) {}
		public void onTextChanged(CharSequence se, int s, int b, int c) {}

		
	}
	
	public class TA implements TextWatcher{

		public void afterTextChanged(Editable s) {
			anima.setTA(Eval.string(s.toString()));
		}

		public void beforeTextChanged(CharSequence se, int s, int c, int a) {}
		public void onTextChanged(CharSequence se, int s, int b, int c) {}

		
	}
	public class ModificadorDefensa implements OnCheckedChangeListener {

	
		public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
			Modificador m = (Modificador) buttonView.getParent().getParent();
			if (isChecked)
				anima.setModificadorDefensa(m.getModificador());
			else
				anima.setModificadorDefensa(-m.getModificador());	

			defensa.setText("" + anima.getDefensaTotal());

		}
	}
	
	public class ModificadorAtaque implements OnCheckedChangeListener {

		public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
			
			Modificador m = (Modificador) buttonView.getParent().getParent();
			if (isChecked)
				anima.setModificadorAtaque(m.getModificador());
			else
				anima.setModificadorAtaque(-m.getModificador());
			
			ataque.setText(""+ anima.getAtaqueTotal());
		}
		
	}
	
	public void siguiente(View v){
		resultado.setText(anima.getResultado());
        ViewFlipper flipper = (ViewFlipper) findViewById(R.id.flipper);
        flipper.showNext();
        
    }
	
	public void anterior(View v){
		resultado.setText(anima.getResultado());
        ViewFlipper flipper = (ViewFlipper) findViewById(R.id.flipper);
        flipper.showPrevious();  
    }
	
	public void borrar(View v) {
		if (v.hasFocus()) return;
		
		EditText e = (EditText) v;
		e.setText("");
	}
	
	
	public void tiradaataque(View v) {
		Intent i = new Intent(v.getContext(), Lanzador.class);
		startActivityForResult(i, 0);
	}
	
	public void tiradadefensa(View v) {
		Intent i = new Intent(v.getContext(), Lanzador.class);
		startActivityForResult(i, 1);
	}
	
	 public void onActivityResult(int requestCode, int resultCode, Intent data) {
		 
		 EditText t;
		 if (requestCode == 0)
			 t = (EditText) findViewById(R.ataque.valor);
		 else
			 t = (EditText) findViewById(R.defensa.valor);
		 
		 		 
		 t.setText(""+data.getIntExtra("valor", 0));
		 t.requestFocus();
		 
	 }
	
	
}
